// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package example

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IncrementorClient is the client API for Incrementor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IncrementorClient interface {
	Inc(ctx context.Context, in *NumArgument, opts ...grpc.CallOption) (*NumResult, error)
	NInc(ctx context.Context, in *NNumArgument, opts ...grpc.CallOption) (Incrementor_NIncClient, error)
	Sum(ctx context.Context, opts ...grpc.CallOption) (Incrementor_SumClient, error)
	StreamSum(ctx context.Context, opts ...grpc.CallOption) (Incrementor_StreamSumClient, error)
}

type incrementorClient struct {
	cc grpc.ClientConnInterface
}

func NewIncrementorClient(cc grpc.ClientConnInterface) IncrementorClient {
	return &incrementorClient{cc}
}

func (c *incrementorClient) Inc(ctx context.Context, in *NumArgument, opts ...grpc.CallOption) (*NumResult, error) {
	out := new(NumResult)
	err := c.cc.Invoke(ctx, "/example.Incrementor/Inc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incrementorClient) NInc(ctx context.Context, in *NNumArgument, opts ...grpc.CallOption) (Incrementor_NIncClient, error) {
	stream, err := c.cc.NewStream(ctx, &Incrementor_ServiceDesc.Streams[0], "/example.Incrementor/NInc", opts...)
	if err != nil {
		return nil, err
	}
	x := &incrementorNIncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Incrementor_NIncClient interface {
	Recv() (*NumResult, error)
	grpc.ClientStream
}

type incrementorNIncClient struct {
	grpc.ClientStream
}

func (x *incrementorNIncClient) Recv() (*NumResult, error) {
	m := new(NumResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *incrementorClient) Sum(ctx context.Context, opts ...grpc.CallOption) (Incrementor_SumClient, error) {
	stream, err := c.cc.NewStream(ctx, &Incrementor_ServiceDesc.Streams[1], "/example.Incrementor/Sum", opts...)
	if err != nil {
		return nil, err
	}
	x := &incrementorSumClient{stream}
	return x, nil
}

type Incrementor_SumClient interface {
	Send(*NumArgument) error
	CloseAndRecv() (*NumResult, error)
	grpc.ClientStream
}

type incrementorSumClient struct {
	grpc.ClientStream
}

func (x *incrementorSumClient) Send(m *NumArgument) error {
	return x.ClientStream.SendMsg(m)
}

func (x *incrementorSumClient) CloseAndRecv() (*NumResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(NumResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *incrementorClient) StreamSum(ctx context.Context, opts ...grpc.CallOption) (Incrementor_StreamSumClient, error) {
	stream, err := c.cc.NewStream(ctx, &Incrementor_ServiceDesc.Streams[2], "/example.Incrementor/StreamSum", opts...)
	if err != nil {
		return nil, err
	}
	x := &incrementorStreamSumClient{stream}
	return x, nil
}

type Incrementor_StreamSumClient interface {
	Send(*NumArgument) error
	Recv() (*NumResult, error)
	grpc.ClientStream
}

type incrementorStreamSumClient struct {
	grpc.ClientStream
}

func (x *incrementorStreamSumClient) Send(m *NumArgument) error {
	return x.ClientStream.SendMsg(m)
}

func (x *incrementorStreamSumClient) Recv() (*NumResult, error) {
	m := new(NumResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IncrementorServer is the server API for Incrementor service.
// All implementations must embed UnimplementedIncrementorServer
// for forward compatibility
type IncrementorServer interface {
	Inc(context.Context, *NumArgument) (*NumResult, error)
	NInc(*NNumArgument, Incrementor_NIncServer) error
	Sum(Incrementor_SumServer) error
	StreamSum(Incrementor_StreamSumServer) error
	mustEmbedUnimplementedIncrementorServer()
}

// UnimplementedIncrementorServer must be embedded to have forward compatible implementations.
type UnimplementedIncrementorServer struct {
}

func (UnimplementedIncrementorServer) Inc(context.Context, *NumArgument) (*NumResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inc not implemented")
}
func (UnimplementedIncrementorServer) NInc(*NNumArgument, Incrementor_NIncServer) error {
	return status.Errorf(codes.Unimplemented, "method NInc not implemented")
}
func (UnimplementedIncrementorServer) Sum(Incrementor_SumServer) error {
	return status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedIncrementorServer) StreamSum(Incrementor_StreamSumServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSum not implemented")
}
func (UnimplementedIncrementorServer) mustEmbedUnimplementedIncrementorServer() {}

// UnsafeIncrementorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IncrementorServer will
// result in compilation errors.
type UnsafeIncrementorServer interface {
	mustEmbedUnimplementedIncrementorServer()
}

func RegisterIncrementorServer(s grpc.ServiceRegistrar, srv IncrementorServer) {
	s.RegisterService(&Incrementor_ServiceDesc, srv)
}

func _Incrementor_Inc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumArgument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncrementorServer).Inc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Incrementor/Inc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncrementorServer).Inc(ctx, req.(*NumArgument))
	}
	return interceptor(ctx, in, info, handler)
}

func _Incrementor_NInc_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NNumArgument)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IncrementorServer).NInc(m, &incrementorNIncServer{stream})
}

type Incrementor_NIncServer interface {
	Send(*NumResult) error
	grpc.ServerStream
}

type incrementorNIncServer struct {
	grpc.ServerStream
}

func (x *incrementorNIncServer) Send(m *NumResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Incrementor_Sum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IncrementorServer).Sum(&incrementorSumServer{stream})
}

type Incrementor_SumServer interface {
	SendAndClose(*NumResult) error
	Recv() (*NumArgument, error)
	grpc.ServerStream
}

type incrementorSumServer struct {
	grpc.ServerStream
}

func (x *incrementorSumServer) SendAndClose(m *NumResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *incrementorSumServer) Recv() (*NumArgument, error) {
	m := new(NumArgument)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Incrementor_StreamSum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IncrementorServer).StreamSum(&incrementorStreamSumServer{stream})
}

type Incrementor_StreamSumServer interface {
	Send(*NumResult) error
	Recv() (*NumArgument, error)
	grpc.ServerStream
}

type incrementorStreamSumServer struct {
	grpc.ServerStream
}

func (x *incrementorStreamSumServer) Send(m *NumResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *incrementorStreamSumServer) Recv() (*NumArgument, error) {
	m := new(NumArgument)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Incrementor_ServiceDesc is the grpc.ServiceDesc for Incrementor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Incrementor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.Incrementor",
	HandlerType: (*IncrementorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Inc",
			Handler:    _Incrementor_Inc_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NInc",
			Handler:       _Incrementor_NInc_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Sum",
			Handler:       _Incrementor_Sum_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamSum",
			Handler:       _Incrementor_StreamSum_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "example.proto",
}
