// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package example

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MySuperServiceClient is the client API for MySuperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MySuperServiceClient interface {
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Status, error)
	// rpc GetRandomNumber(google.protobuf.Empty) returns (int64);
	GetRandomNumber(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NumResult, error)
}

type mySuperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMySuperServiceClient(cc grpc.ClientConnInterface) MySuperServiceClient {
	return &mySuperServiceClient{cc}
}

func (c *mySuperServiceClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/example.MySuperService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySuperServiceClient) GetRandomNumber(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NumResult, error) {
	out := new(NumResult)
	err := c.cc.Invoke(ctx, "/example.MySuperService/GetRandomNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MySuperServiceServer is the server API for MySuperService service.
// All implementations must embed UnimplementedMySuperServiceServer
// for forward compatibility
type MySuperServiceServer interface {
	AddUser(context.Context, *User) (*Status, error)
	// rpc GetRandomNumber(google.protobuf.Empty) returns (int64);
	GetRandomNumber(context.Context, *empty.Empty) (*NumResult, error)
	mustEmbedUnimplementedMySuperServiceServer()
}

// UnimplementedMySuperServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMySuperServiceServer struct {
}

func (UnimplementedMySuperServiceServer) AddUser(context.Context, *User) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedMySuperServiceServer) GetRandomNumber(context.Context, *empty.Empty) (*NumResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomNumber not implemented")
}
func (UnimplementedMySuperServiceServer) mustEmbedUnimplementedMySuperServiceServer() {}

// UnsafeMySuperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MySuperServiceServer will
// result in compilation errors.
type UnsafeMySuperServiceServer interface {
	mustEmbedUnimplementedMySuperServiceServer()
}

func RegisterMySuperServiceServer(s grpc.ServiceRegistrar, srv MySuperServiceServer) {
	s.RegisterService(&MySuperService_ServiceDesc, srv)
}

func _MySuperService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySuperServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.MySuperService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySuperServiceServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySuperService_GetRandomNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySuperServiceServer).GetRandomNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.MySuperService/GetRandomNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySuperServiceServer).GetRandomNumber(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MySuperService_ServiceDesc is the grpc.ServiceDesc for MySuperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MySuperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.MySuperService",
	HandlerType: (*MySuperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _MySuperService_AddUser_Handler,
		},
		{
			MethodName: "GetRandomNumber",
			Handler:    _MySuperService_GetRandomNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example.proto",
}
